{"version":3,"sources":["utils/index.js","assets/comment.svg","mobx/modifyPosts.js","services/post.js","mobx/index.js","components/alert-circle/index.js","components/post-thumbnail/index.js","components/post-list/index.js","components/loading-spinner/index.js","containers/sidebar/index.js","components/post-home/index.js","containers/home/index.js","containers/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","thumbnailExists","thumbnail","length","modifyKeyFromPost","postList","postId","postMutation","i","id","Object","assign","getTopPosts","subreddit","url","process","fetch","then","response","json","PostStore","this","isFetching","data","posts","selectPost","cleanPostList","post","postSelected","visited","returnPostSelected","postIdToDismiss","filter","item","returnPostDismissed","observable","action","AlertCircle","className","PostThumbnail","interactive","href","target","rel","alt","src","PostList","onClickHandler","onDismissPost","isSelected","dateLabel","moment","unix","created_utc","utc","fromNow","onClick","title","author","commentIcon","num_comments","e","event","stopPropagation","dismissPost","LoadingSpinner","inject","postStore","observer","postClicked","postDismissed","map","key","getPosts","PostHome","HomePost","useState","selectedSubreddit","setSelectedSubreddit","searchPosts","useEffect","onSubmit","preventDefault","htmlFor","name","value","type","onChange","trim","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a78e592.chunk.js","sourcesContent":["function thumbnailExists(thumbnail) {\n  return thumbnail.length > 0 && thumbnail !== 'self';\n}\n\nmodule.exports = { thumbnailExists}","module.exports = __webpack_public_path__ + \"static/media/comment.4c471c20.svg\";","export function returnPostDismissed(postList, postSelected, postIdToDismiss) {\n  const posts = postList.filter((item) => item.id !== postIdToDismiss);\n  return {\n    posts,\n    postSelected: postSelected.id === postIdToDismiss ? posts[0] : postSelected,\n  };\n}\n\nexport function returnPostSelected(postList, postSelected) {\n  return {\n    posts: modifyKeyFromPost(postList, postSelected.id, { visited: true }),\n    postSelected: postSelected,\n  };\n}\n\nfunction modifyKeyFromPost(postList, postId, postMutation) {\n  for (let i = 0; i < postList.length; i++) {\n    if (postList[i].id === postId) {\n      postList[i] = Object.assign(postList[i], postMutation);\n      break;\n    }\n  }\n  return postList;\n}\n","export function getTopPosts(subreddit) {\n  let url = `${process.env.REACT_APP_URL}/api/v1/posts`;\n  url += subreddit ? `?subreddit=${subreddit}` : '';\n  return fetch(url).then((response) => response.json());\n}\n","import { observable, action } from 'mobx';\nimport { returnPostSelected, returnPostDismissed } from './modifyPosts';\nimport { getTopPosts } from '../services/post';\n\nexport default class PostStore {\n  @observable posts = [];\n  @observable postSelected = null;\n  @observable isFetching = false;\n  @observable subreddit = 'reactjs';\n\n  @action\n  async getPosts(subreddit) {\n    try {\n      this.isFetching = true;\n      this.subreddit = subreddit;\n      const data = await getTopPosts(this.subreddit);\n\n      this.posts = data;\n      this.selectPost(data[0]);\n    } catch (e) {\n      this.cleanPostList();\n    } finally {\n      this.isFetching = false;\n    }\n  }\n\n  @action\n  selectPost(post) {\n    const { posts, postSelected } = returnPostSelected(this.posts, post);\n    this.posts = posts;\n    this.postSelected = postSelected;\n  }\n\n  @action\n  dismissPost(post) {\n    const { posts, postSelected } = returnPostDismissed(this.posts, this.postSelected, post.id);\n    this.posts = posts;\n    this.postSelected = postSelected;\n  }\n\n  @action\n  cleanPostList() {\n    this.posts = [];\n    this.postSelected = null;\n  }\n}\n","import React from 'react';\nimport './style.css';\n\nexport default function AlertCircle() {\n  return <span className=\"dot\"></span>;\n}\n","import React from 'react';\n\nexport default function PostThumbnail({ thumbnail, interactive = false }) {\n  return interactive ? (\n    <a href={thumbnail} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img alt=\"thumbnail\" src={thumbnail} />\n    </a>\n  ) : (\n    <img alt=\"thumbnail\" src={thumbnail} />\n  );\n}\n","import React from 'react';\nimport './style.css';\nimport moment from 'moment';\n\nimport commentIcon from '../../assets/comment.svg';\nimport AlertCircle from '../alert-circle';\nimport PostThumbnail from '../post-thumbnail';\n\nimport { thumbnailExists } from '../../utils';\n\nexport default function PostList({ post, onClickHandler, onDismissPost, isSelected }) {\n  const dateLabel = moment.unix(post.created_utc).utc().fromNow();\n  const className = `post-list${isSelected ? ' selected' : ''}`;\n\n  function dismissPost(event, post) {\n    event.stopPropagation();\n    onDismissPost(post);\n  }\n  return (\n    <div className={className} onClick={() => onClickHandler(post)}>\n      <h4 className=\"title\">\n        {!post.visited && <AlertCircle />}\n        {post.title}\n      </h4>\n      <p className=\"author\">by {post.author}</p>\n      <div>\n        {thumbnailExists(post.thumbnail) && <PostThumbnail thumbnail={post.thumbnail} interactive={false} />}\n      </div>\n      <p className=\"comments\">\n        <img className=\"comment-icon\" alt=\"comment-icon\" src={commentIcon} />\n        {post.num_comments} comments\n      </p>\n      <p className=\"date-created\">Created: {dateLabel}</p>\n      <button onClick={(e) => dismissPost(e, post)} className=\"dismiss-button\">\n        Dismiss\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport './style.css';\n\nexport default function LoadingSpinner() {\n  return <div className=\"loader\"></div>;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { observer, inject } from 'mobx-react';\n\nimport PostList from '../../components/post-list';\nimport LoadingSpinner from '../../components/loading-spinner';\nimport './style.css';\n\nfunction Sidebar({ postStore }) {\n  const { posts, isFetching, postSelected, subreddit } = postStore;\n\n  function postClicked(post) {\n    postStore.selectPost(post);\n  }\n\n  function postDismissed(post) {\n    postStore.dismissPost(post);\n  }\n\n  function onRefreshAllClick() {\n    postStore.getPosts(subreddit);\n  }\n\n  return (\n    <aside>\n      {!isFetching ? (\n        posts.length ? (\n          posts.map((post) => (\n            <PostList\n              isSelected={postSelected.id === post.id}\n              onDismissPost={postDismissed}\n              onClickHandler={postClicked}\n              key={post.id}\n              post={post}\n            />\n          ))\n        ) : (\n          <button onClick={onRefreshAllClick} className=\"refresh-button\">\n            Refresh List\n          </button>\n        )\n      ) : (\n        <LoadingSpinner />\n      )}\n    </aside>\n  );\n}\n\nSidebar.propTypes = {\n  postStore: PropTypes.object,\n};\n\nexport default inject(({ postStore }) => ({ postStore }))(observer(Sidebar));\n","import React from 'react';\n\nimport './style.css';\n\nimport PostThumbnail from '../post-thumbnail';\n\nimport { thumbnailExists } from '../../utils';\n\nexport default function PostHome({ post }) {\n  return (\n    <div className=\"post-home\">\n      <h3>{post.title}</h3>\n      {thumbnailExists(post.thumbnail) && (\n        <PostThumbnail thumbnail={post.thumbnail} interactive={true} />\n      )}\n      <a className=\"post-link\" href={post.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        Go To Post Link\n      </a>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport PostHome from '../../components/post-home';\n\nexport default function HomePost({ post }) {\n  return <PostHome post={post} />;\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer, inject } from 'mobx-react';\n\nimport './style.css';\nimport Sidebar from './sidebar';\nimport Home from './home';\n\nfunction RedditApp({ postStore }) {\n  const { postSelected, posts, subreddit } = postStore;\n  const [selectedSubreddit, setSelectedSubreddit] = useState(subreddit);\n  useEffect(() => {\n    searchPosts();\n  }, [postStore]);\n\n  function onDismissAllClick() {\n    postStore.cleanPostList();\n  }\n\n  function searchPosts() {\n    postStore.getPosts(selectedSubreddit);\n  }\n\n  function onFormSubmit(event) {\n    event.preventDefault();\n    searchPosts();\n  }\n\n  return (\n    <div className=\"main-container\">\n      <Sidebar />\n      <div>\n        <nav className=\"navbar\">\n          {!!posts.length && (\n            <button onClick={onDismissAllClick} className=\"dismiss-all-button\">\n              Dismiss All\n            </button>\n          )}\n          <form onSubmit={onFormSubmit}>\n            <label htmlFor=\"subreddit\">Subreddit</label>\n            <input\n              name=\"subreddit\"\n              id=\"subreddit\"\n              value={selectedSubreddit}\n              type=\"text\"\n              onChange={(event) => setSelectedSubreddit(event.target.value.trim())}\n            />\n            <input type=\"submit\" value=\"Search!\" />\n          </form>\n        </nav>\n        <h1 className=\"app-title\">CloneReddit</h1>\n        {postSelected && <Home post={postSelected} />}\n      </div>\n    </div>\n  );\n}\n\nRedditApp.propTypes = {\n  postStore: PropTypes.object,\n};\n\nexport default inject(({ postStore }) => ({ postStore }))(observer(RedditApp));\n","import React from 'react';\nimport { Provider } from 'mobx-react';\nimport PostStore from './mobx';\nimport RedditApp from './containers';\n\n\nfunction App() {\n  return (\n    <Provider postStore={new PostStore()}>\n      <RedditApp />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}